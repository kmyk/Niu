trait Index {
  type Output;
  type Arg;
  fn index(self: &Self, i: Self#Index::Arg) -> &Self#Index::Output;
}

trait IndexMut where Self: Index {
  fn index_mut(self: &mut Self, i: Self#Index::Arg) -> &mut Self#Index::Output;
}

struct Vec<T> $${std::vector<$ty(T)>}$$ {
  fn new() -> Self $${std::vector<$ty(T)>()}$$
  fn push(self: &Self, t: T) -> bool $${$arg(self)->push_back($arg(t))}$$
  fn get(self: &Self, i: u64) -> T $${$arg(self)->at($arg(i))}$$
}

impl<T> Index for Vec<T> {
  type Output = T;
  type Arg = u64;
  fn index(self: &Self, i: u64) -> &T $${&$arg(self)->at($arg(i))}$$
}

impl<T> IndexMut for Vec<T> {
  fn index_mut(self: &mut Self, i: u64) -> &mut T $${&$arg(self)->at($arg(i))}$$
}

struct Hoge<S> {
  a: S,
} {}

impl<T> Index for Hoge<T>
where T: Index(Arg=u64) {
  type Output = T#Index::Output;
  type Arg = u64;
  fn index(self: &Self, i: u64) -> &T#Index::Output {
    self.a.index(i)
  }
}

impl<T> IndexMut for Hoge<T>
where T: Index(Arg=u64), T: IndexMut {
  fn index_mut(self: &mut Self, i: u64) -> &mut T#Index::Output {
    self.a.index_mut(i)
  }
}
