import "std/vec.niu"
trait Monoid {
  fn ide() -> Self;
  fn ope(self: &Self, right: &Self) -> Self;
}

impl Monoid for i64 {
  fn ide() -> i64 { 0i64 }
  fn ope(self: &i64, right: &i64) -> i64 { *self + *right }
}

struct SegmentTree<T> {
  node: Vec<T>,
  n: u64,
} {
  fn init(arr: &Vec<T>) -> Self
  where T: Monoid {
    let mut n = 1;
    for(n = 1; n < arr.len(); n = n * 2) {};
    let mut node = Vec::init(2 * n, T#Monoid::ide());
    for(let mut i = 0; i < arr.len(); i = i + 1) {
      *node.index_mut(i + n) = *arr.index(i);
    };
    for(let mut i = n - 1; i >= 1; i = i - 1) {
      *node.index_mut(i) = node.index(i * 2).ope(node.index(i * 2 + 1));
    };
    SegmentTree { node: node, n: n, }
  }

  fn get(self: &Self, i: u64) -> &T {
    self.node.index(i + self.n)
  }

  fn update(self: &mut Self, p: u64, x: T) -> void
  where T: Monoid {
    *self.node.index_mut(p + self.n) = x;
    for(let mut i = (p + self.n) / 2; i >= 1; i = i / 2) {
      *self.node.index_mut(i) = self.node.index(i * 2).ope(self.node.index(i * 2 + 1));
    };
  }

  fn sum(self: &mut Self, l: u64, r: u64) -> T
  where T: Monoid {
    let mut lx = T#Monoid::ide();
    let mut rx = T#Monoid::ide();
    let mut i = l + self.n;
    for(let mut j = r + self.n; i < j; j = j >> 1) {
      if (i & 1) == 1 {
        lx = lx.ope(self.node.index(i));
        i = i + 1;
      } else {};
      if (j & 1) == 1 {
        j = j - 1;
        rx = self.node.index(j).ope(&rx);
      } else {};
      i = i >> 1;
    };
    lx.ope(&rx)
  }
}
